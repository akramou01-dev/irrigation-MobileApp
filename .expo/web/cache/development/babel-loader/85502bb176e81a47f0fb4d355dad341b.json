{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\bpx_tech\\\\GreanIt app\\\\my-app\\\\App.js\";\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as Font from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { enableScreens } from \"react-native-screens\";\nimport { AuthContext } from \"./Components/context\";\nimport Colors from \"./Constants/Colors\";\nimport HomeScreen from \"./Screens/homeScreen\";\nimport ZonesScreen from \"./Screens/zonesScreen\";\nimport Stat from \"./Screens/statistiques\";\nimport Notifications from \"./Screens/notifications\";\nimport Weather from \"./Screens/weather\";\nimport Profile from \"./Screens/profile\";\nimport Login from \"./Screens/login\";\nimport Signup from \"./Screens/signup\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport Axios from \"axios\";\nenableScreens();\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    \"futura-bold\": require(\"./assets/fonts/futura_md_bt_bold.ttf\"),\n    \"futura-meduim\": require(\"./assets/fonts/FuturaMediumBT.ttf\"),\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\")\n  });\n};\n\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontLoaded = _useState2[0],\n      setFontsLoaded = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      token = _useState4[0],\n      setToken = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var authentificationHandlers = useMemo(function () {\n    return {\n      SignIn: function SignIn(idToken) {\n        setToken(idToken);\n        console.log(idToken);\n      },\n      SignOut: function SignOut() {}\n    };\n  }, []);\n\n  if (!fontLoaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        setFontsLoaded(true);\n      },\n      onError: function onError() {\n        setFontsLoaded(true);\n      }\n    });\n  }\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: Colors.Green_logo\n    }));\n  }\n\n  var HomeNavigator = createStackNavigator();\n  var LoginNavigator = createStackNavigator();\n  var ButtomTab = createBottomTabNavigator();\n\n  var HomeStackNavigator = function HomeStackNavigator() {\n    return React.createElement(HomeNavigator.Navigator, {\n      headerMode: \"none\",\n      initialRouteName: \"HomeScreen\",\n      screenOptions: {\n        cardStyle: {\n          backgroundColor: \"white\"\n        }\n      }\n    }, React.createElement(HomeNavigator.Screen, {\n      name: \"HomeScreen\",\n      options: {\n        headerTitle: function headerTitle() {\n          return React.createElement(Image, {\n            style: {\n              width: 160,\n              height: 130\n            },\n            source: require(\"./assets/logoNav.png\")\n          });\n        }\n      },\n      component: HomeScreen\n    }), React.createElement(HomeNavigator.Screen, {\n      name: \"ZonesScreen\",\n      component: ZonesScreen\n    }));\n  };\n\n  return React.createElement(AuthContext.Provider, {\n    value: authentificationHandlers\n  }, React.createElement(NavigationContainer, null, !token ? React.createElement(ButtomTab.Navigator, {\n    tabBarOptions: {\n      activeTintColor: Colors.dark_grey,\n      inactiveTintColor: Colors.grey_fade,\n      labelStyle: styles.tabText,\n      style: styles.tab\n    }\n  }, React.createElement(ButtomTab.Screen, {\n    name: \"Home\",\n    component: HomeStackNavigator,\n    options: {\n      tabBarColor: \"white\",\n      tabBarIcon: function tabBarIcon(_ref) {\n        var color = _ref.color;\n        return React.createElement(Ionicons, {\n          name: \"home\",\n          size: 30,\n          color: color\n        });\n      }\n    }\n  }), React.createElement(ButtomTab.Screen, {\n    name: \"Stats\",\n    component: Stat,\n    options: {\n      tabBarColor: \"white\",\n      tabBarIcon: function tabBarIcon(_ref2) {\n        var color = _ref2.color;\n        return React.createElement(Ionicons, {\n          name: \"stats-chart\",\n          size: 30,\n          color: color\n        });\n      }\n    }\n  }), React.createElement(ButtomTab.Screen, {\n    name: \"Weather\",\n    component: Weather,\n    options: {\n      tabBarColor: \"white\",\n      tabBarIcon: function tabBarIcon(_ref3) {\n        var color = _ref3.color;\n        return React.createElement(Ionicons, {\n          name: \"partly-sunny\",\n          size: 30,\n          color: color\n        });\n      }\n    }\n  }), React.createElement(ButtomTab.Screen, {\n    name: \"Notifications\",\n    component: Notifications,\n    options: {\n      tabBarColor: \"white\",\n      tabBarIcon: function tabBarIcon(_ref4) {\n        var color = _ref4.color;\n        return React.createElement(Ionicons, {\n          name: \"notifications\",\n          size: 30,\n          color: color\n        });\n      }\n    }\n  }), React.createElement(ButtomTab.Screen, {\n    name: \"Profile\",\n    component: Profile,\n    options: {\n      tabBarColor: \"white\",\n      tabBarIcon: function tabBarIcon(_ref5) {\n        var color = _ref5.color;\n        return React.createElement(FontAwesome, {\n          name: \"user\",\n          size: 30,\n          color: color\n        });\n      }\n    }\n  })) : React.createElement(LoginNavigator.Navigator, {\n    headerMode: \"none\"\n  }, React.createElement(LoginNavigator.Screen, {\n    name: \"Login\",\n    component: Login\n  }), React.createElement(LoginNavigator.Screen, {\n    name: \"Signup\",\n    component: Signup\n  }))));\n}\nvar styles = StyleSheet.create({\n  tabText: {\n    fontSize: 13,\n    fontFamily: \"futura-bold\"\n  },\n  tab: {\n    borderTopColor: Colors.whiteSmoke,\n    borderTopWidth: 0.3,\n    height: 55,\n    paddingVertical: 5,\n    elevation: 10,\n    overflow: \"hidden\"\n  }\n});","map":{"version":3,"sources":["C:/Users/hp/Desktop/bpx_tech/GreanIt app/my-app/App.js"],"names":["React","useState","useMemo","useEffect","Font","AppLoading","NavigationContainer","createStackNavigator","createBottomTabNavigator","enableScreens","AuthContext","Colors","HomeScreen","ZonesScreen","Stat","Notifications","Weather","Profile","Login","Signup","Ionicons","FontAwesome","Axios","fetchFonts","loadAsync","require","App","fontLoaded","setFontsLoaded","token","setToken","isLoading","setIsLoading","authentificationHandlers","SignIn","idToken","console","log","SignOut","flex","alignItems","justifyContent","Green_logo","HomeNavigator","LoginNavigator","ButtomTab","HomeStackNavigator","cardStyle","backgroundColor","headerTitle","width","height","activeTintColor","dark_grey","inactiveTintColor","grey_fade","labelStyle","styles","tabText","style","tab","tabBarColor","tabBarIcon","color","StyleSheet","create","fontSize","fontFamily","borderTopColor","whiteSmoke","borderTopWidth","paddingVertical","elevation","overflow"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\nimport { View, ActivityIndicator, Image, StyleSheet,Alert } from \"react-native\";\nimport * as Font from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { enableScreens } from \"react-native-screens\";\n\nimport { AuthContext } from \"./Components/context\";\nimport Colors from \"./Constants/Colors\";\nimport HomeScreen from \"./Screens/homeScreen\";\nimport ZonesScreen from \"./Screens/zonesScreen\";\nimport Stat from \"./Screens/statistiques\";\nimport Notifications from \"./Screens/notifications\";\nimport Weather from \"./Screens/weather\";\nimport Profile from \"./Screens/profile\";\nimport Login from \"./Screens/login\";\nimport Signup from \"./Screens/signup\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport Axios from \"axios\";\n\nenableScreens();\n\nconst fetchFonts = () => {\n  return Font.loadAsync({\n    \"futura-bold\": require(\"./assets/fonts/futura_md_bt_bold.ttf\"),\n    \"futura-meduim\": require(\"./assets/fonts/FuturaMediumBT.ttf\"),\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n  });\n};\n\nexport default function App() {\n  const [fontLoaded, setFontsLoaded] = useState(false);\n  const [token, setToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const authentificationHandlers = useMemo(\n    () => ({\n      SignIn: (idToken) => {\n        setToken(idToken);\n        console.log(idToken)\n      },\n      // Signup: () => {\n      //   setIsLoged(true);\n      //   setIsLoading(false);\n      // },\n      SignOut: () => {\n        // setIsLoading(false);\n      },\n    }),\n    []\n  );\n\n  if (!fontLoaded) {\n    return (\n      <AppLoading\n        startAsync={fetchFonts}\n        onFinish={() => {\n          setFontsLoaded(true);\n        }}\n        onError={() => {\n          setFontsLoaded(true);\n        }}\n      />\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n        <ActivityIndicator size=\"large\" color={Colors.Green_logo} />\n      </View>\n    );\n  }\n\n  const HomeNavigator = createStackNavigator();\n  const LoginNavigator = createStackNavigator();\n  const ButtomTab = createBottomTabNavigator();\n\n  const HomeStackNavigator = () => (\n    <HomeNavigator.Navigator\n      headerMode=\"none\"\n      initialRouteName=\"HomeScreen\"\n      screenOptions={{\n        cardStyle: {\n          backgroundColor: \"white\",\n        },\n        // headerStyle: {\n        //   backgroundColor: \"white\",\n        // },\n        // headerTintColor: Colors.Green_grean,\n      }}\n    >\n      <HomeNavigator.Screen\n        name=\"HomeScreen\"\n        options={{\n          headerTitle: () => (\n            <Image\n              style={{ width: 160, height: 130 }}\n              source={require(\"./assets/logoNav.png\")}\n            />\n          ),\n        }}\n        component={HomeScreen}\n      />\n      <HomeNavigator.Screen name=\"ZonesScreen\" component={ZonesScreen} />\n    </HomeNavigator.Navigator>\n  );\n\n  return (\n    <AuthContext.Provider value={authentificationHandlers}>\n      <NavigationContainer>\n        {!token ? (\n          <ButtomTab.Navigator\n            tabBarOptions={{\n              activeTintColor: Colors.dark_grey,\n              inactiveTintColor: Colors.grey_fade,\n              labelStyle: styles.tabText,\n              style: styles.tab,\n            }}\n\n            // labeled={false}\n          >\n            <ButtomTab.Screen\n              name=\"Home\"\n              component={HomeStackNavigator}\n              options={{\n                tabBarColor: \"white\",\n                tabBarIcon: ({ color }) => {\n                  return <Ionicons name=\"home\" size={30} color={color} />;\n                },\n              }}\n            />\n            <ButtomTab.Screen\n              name=\"Stats\"\n              component={Stat}\n              options={{\n                tabBarColor: \"white\",\n                tabBarIcon: ({ color }) => {\n                  return (\n                    <Ionicons name=\"stats-chart\" size={30} color={color} />\n                  );\n                },\n              }}\n            />\n            <ButtomTab.Screen\n              name=\"Weather\"\n              component={Weather}\n              options={{\n                tabBarColor: \"white\",\n                tabBarIcon: ({ color }) => {\n                  return (\n                    <Ionicons name=\"partly-sunny\" size={30} color={color} />\n                  );\n                },\n              }}\n            />\n            <ButtomTab.Screen\n              name=\"Notifications\"\n              component={Notifications}\n              options={{\n                tabBarColor: \"white\",\n                tabBarIcon: ({ color }) => {\n                  return (\n                    <Ionicons name=\"notifications\" size={30} color={color} />\n                  );\n                },\n              }}\n            />\n            <ButtomTab.Screen\n              name=\"Profile\"\n              component={Profile}\n              options={{\n                tabBarColor: \"white\",\n                tabBarIcon: ({ color }) => {\n                  return <FontAwesome name=\"user\" size={30} color={color} />;\n                },\n              }}\n            />\n          </ButtomTab.Navigator>\n        ) : (\n          <LoginNavigator.Navigator headerMode=\"none\">\n            <LoginNavigator.Screen\n              name=\"Login\"\n              component={Login}\n              // onLog={() => {\n              //   setIsLoged(true);\n              // }}\n            />\n            <LoginNavigator.Screen name=\"Signup\" component={Signup} />\n          </LoginNavigator.Navigator>\n        )}\n      </NavigationContainer>\n    </AuthContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabText: {\n    fontSize: 13,\n    fontFamily: \"futura-bold\",\n  },\n  tab: {\n    borderTopColor: Colors.whiteSmoke,\n    borderTopWidth: 0.3,\n    height: 55,\n    paddingVertical: 5,\n    elevation: 10,\n    overflow: \"hidden\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}