{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\bpx_tech\\\\GreanIt app\\\\my-app\\\\Screens\\\\weather.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport * as Location from \"expo-location\";\nimport Colors from \"../Constants/Colors\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport axios from \"axios\";\n\nvar Weather = function Weather(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFetching = _useState2[0],\n      setIsFetching = _useState2[1];\n\n  var _useState3 = useState({\n    lat: null,\n    lon: null\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      position = _useState4[0],\n      setPosition = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      weather = _useState6[0],\n      setWeather = _useState6[1];\n\n  var getLocation = function getLocation() {\n    var _await$Location$reque, status, location;\n\n    return _regeneratorRuntime.async(function getLocation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n          case 2:\n            _await$Location$reque = _context.sent;\n            status = _await$Location$reque.status;\n\n            if (!(status !== \"granted\")) {\n              _context.next = 7;\n              break;\n            }\n\n            Alert.alert(\"can't get location\", \"you need to allow location\", [{\n              text: \"ok\"\n            }]);\n            return _context.abrupt(\"return\");\n\n          case 7:\n            _context.prev = 7;\n            setIsFetching(true);\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({\n              timeInterval: 6000\n            }));\n\n          case 11:\n            location = _context.sent;\n            setPosition({\n              lat: location.coords.latitude,\n              lon: location.coords.longitude\n            });\n            getWeather(location.coords.latitude, location.coords.longitude);\n            _context.next = 19;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](7);\n            Alert.alert(\"could not fetch position\", \"please verify your location service is enabled\", [{\n              text: \"ok\"\n            }]);\n\n          case 19:\n            setIsFetching(false);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[7, 16]], Promise);\n  };\n\n  var getWeather = function getWeather(lat, lon) {\n    var response;\n    return _regeneratorRuntime.async(function getWeather$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(lon === null || lat === null)) {\n              _context2.next = 4;\n              break;\n            }\n\n            Alert.alert(\"No position defined\", \"set your possition to have the weather\", [{\n              text: \"ok\"\n            }]);\n            _context2.next = 15;\n            break;\n\n          case 4:\n            setIsFetching(true);\n            _context2.prev = 5;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(axios.get(\"http://api.openweathermap.org/data/2.5/weather?lat=\" + lat + \"&lon=\" + lon + \"&appid=87e46ac56650170bdc42cc871e3df4fd\"));\n\n          case 8:\n            response = _context2.sent;\n            setWeather(response);\n            _context2.next = 15;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](5);\n            Alert.alert(\"cnx err\", \"verifier votre cnx\", [{\n              text: \"ok\"\n            }]);\n\n          case 15:\n            setIsFetching(false);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[5, 12]], Promise);\n  };\n\n  if (isFetching) {\n    return React.createElement(View, {\n      style: {\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        flex: 1\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: Colors.Green_logo\n    }));\n  }\n\n  console.log(weather);\n  return React.createElement(SafeAreaView, null, React.createElement(View, {\n    style: styles.header\n  }, React.createElement(Image, {\n    style: {\n      width: 190,\n      height: 90,\n      marginTop: 30\n    },\n    source: require(\"../assets/logoNav.png\")\n  })), React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.firsView\n  }, React.createElement(View, {\n    style: {\n      alignItems: \"center\"\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 40\n    }\n  }, \"15 \\xB0\"), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      justifyContent: \"space-evenly\"\n    }\n  }, React.createElement(Ionicons, {\n    name: \"caret-up\",\n    size: 20,\n    color: \"black\"\n  }), React.createElement(Text, {\n    style: {\n      fontSize: 20\n    }\n  }, \"20 \\xB0 /\"), React.createElement(Ionicons, {\n    name: \"caret-down\",\n    size: 20,\n    color: \"black\"\n  }), React.createElement(Text, {\n    style: {\n      fontSize: 20\n    }\n  }, \" \", \"10 \\xB0\"))), React.createElement(View, null, React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      marginBottom: 8\n    }\n  }, React.createElement(Fontisto, {\n    name: \"wind\",\n    size: 24,\n    color: \"black\"\n  }), React.createElement(Text, {\n    style: {\n      fontSize: 20\n    }\n  }, \" \", \"30 M/S\")), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\"\n    }\n  }, React.createElement(Ionicons, {\n    name: \"cloud-outline\",\n    size: 24,\n    color: \"black\"\n  }), React.createElement(Text, {\n    style: {\n      fontSize: 20\n    }\n  }, \"30 %\")))), React.createElement(View, {\n    style: styles.img\n  }, React.createElement(Image, {\n    source: require(\"../assets/sun.jpg\"),\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  header: {\n    height: 90,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  container: {\n    elevation: 30,\n    backgroundColor: \"white\",\n    borderTopLeftRadius: 40,\n    borderTopRightRadius: 40,\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    overflow: \"hidden\",\n    height: Dimensions.get(\"window\").height\n  },\n  firsView: {\n    marginTop: 20,\n    padding: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    width: Dimensions.get(\"window\").width\n  },\n  img: {\n    width: Dimensions.get(\"window\").width * 0.8,\n    height: Dimensions.get(\"window\").width * 0.8,\n    borderRadius: 10,\n    overflow: \"hidden\"\n  }\n});\nexport default Weather;","map":{"version":3,"sources":["C:/Users/hp/Desktop/bpx_tech/GreanIt app/my-app/Screens/weather.js"],"names":["React","useState","useEffect","Location","Colors","Ionicons","Fontisto","axios","Weather","props","isFetching","setIsFetching","lat","lon","position","setPosition","weather","setWeather","getLocation","requestPermissionsAsync","status","Alert","alert","text","getCurrentPositionAsync","timeInterval","location","coords","latitude","longitude","getWeather","get","response","alignItems","justifyContent","flex","Green_logo","console","log","styles","header","width","height","marginTop","require","container","firsView","fontSize","flexDirection","marginBottom","img","StyleSheet","create","elevation","backgroundColor","borderTopLeftRadius","borderTopRightRadius","overflow","Dimensions","padding","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  SafeAreaView,\r\n  Image,\r\n  ActivityIndicator,\r\n  Alert,\r\n  Text,\r\n  Dimensions,\r\n  ImageBackground,\r\n} from \"react-native\";\r\nimport * as Location from \"expo-location\";\r\nimport Colors from \"../Constants/Colors\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { Fontisto } from \"@expo/vector-icons\";\r\nimport axios from \"axios\";\r\n\r\nconst Weather = (props) => {\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const [position, setPosition] = useState({ lat: null, lon: null });\r\n  const [weather, setWeather] = useState();\r\n\r\n  //   useEffect(() => {\r\n  //     getLocation();\r\n  //   }, []);\r\n\r\n  const getLocation = async () => {\r\n    let { status } = await Location.requestPermissionsAsync();\r\n    if (status !== \"granted\") {\r\n      Alert.alert(\"can't get location\", \"you need to allow location\", [\r\n        { text: \"ok\" },\r\n      ]);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsFetching(true);\r\n      const location = await Location.getCurrentPositionAsync({\r\n        timeInterval: 6000,\r\n      });\r\n      setPosition({\r\n        lat: location.coords.latitude,\r\n        lon: location.coords.longitude,\r\n      });\r\n      getWeather(location.coords.latitude, location.coords.longitude);\r\n    } catch (err) {\r\n      Alert.alert(\r\n        \"could not fetch position\",\r\n        \"please verify your location service is enabled\",\r\n        [{ text: \"ok\" }]\r\n      );\r\n    }\r\n    setIsFetching(false);\r\n  };\r\n\r\n  const getWeather = async (lat, lon) => {\r\n    if (lon === null || lat === null) {\r\n      Alert.alert(\r\n        \"No position defined\",\r\n        \"set your possition to have the weather\",\r\n        [{ text: \"ok\" }]\r\n      );\r\n    } else {\r\n      setIsFetching(true);\r\n      try {\r\n        const response = await axios.get(\r\n          `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=87e46ac56650170bdc42cc871e3df4fd`\r\n        );\r\n        setWeather(response);\r\n      } catch (err) {\r\n        Alert.alert(\"cnx err\", \"verifier votre cnx\", [{ text: \"ok\" }]);\r\n      }\r\n    }\r\n    setIsFetching(false);\r\n  };\r\n\r\n  if (isFetching) {\r\n    return (\r\n      <View style={{ alignItems: \"center\", justifyContent: \"center\", flex: 1 }}>\r\n        <ActivityIndicator size=\"large\" color={Colors.Green_logo} />\r\n      </View>\r\n    );\r\n  }\r\n  console.log(weather);\r\n  return (\r\n    <SafeAreaView>\r\n      <View style={styles.header}>\r\n        <Image\r\n          style={{ width: 190, height: 90, marginTop: 30 }}\r\n          source={require(\"../assets/logoNav.png\")}\r\n        />\r\n      </View>\r\n      <View style={styles.container}>\r\n        <View style={styles.firsView}>\r\n          <View style={{ alignItems: \"center\"}}>\r\n            <Text style={{  fontSize: 40 }}>\r\n              15 °\r\n            </Text>\r\n            <View\r\n              style={{\r\n                flexDirection: \"row\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"space-evenly\",\r\n              }}\r\n            >\r\n              <Ionicons name=\"caret-up\" size={20} color=\"black\" />\r\n              <Text style={{  fontSize: 20 }}>\r\n                20 ° /\r\n              </Text>\r\n\r\n              <Ionicons name=\"caret-down\" size={20} color=\"black\" />\r\n              <Text style={{  fontSize: 20 }}>\r\n                {\" \"}\r\n                10 °\r\n              </Text>\r\n            </View>\r\n          </View>\r\n          <View>\r\n          <View style={{flexDirection:\"row\",justifyContent:\"space-between\", marginBottom:8}}>\r\n              <Fontisto name=\"wind\" size={24} color=\"black\" />\r\n              <Text style={{  fontSize: 20 }}>{\" \"}30 M/S</Text>\r\n            </View>\r\n            <View style={{flexDirection:\"row\",justifyContent:\"space-between\"}}>\r\n              <Ionicons name=\"cloud-outline\" size={24} color=\"black\" />\r\n              <Text style={{  fontSize: 20 }}>30 %</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n        <View style={styles.img}>\r\n          <Image\r\n            source={require(\"../assets/sun.jpg\")}\r\n            style={{ width: \"100%\", height: \"100%\",  }}\r\n          />\r\n        </View>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  header: {\r\n    height: 90,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  container: {\r\n    elevation: 30,\r\n    backgroundColor: \"white\",\r\n    borderTopLeftRadius: 40,\r\n    borderTopRightRadius: 40,\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"white\",\r\n    overflow: \"hidden\",\r\n    height: Dimensions.get(\"window\").height,\r\n  },\r\n  firsView: {\r\n    marginTop: 20,\r\n    padding: 15,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-evenly\",\r\n    width: Dimensions.get(\"window\").width,\r\n  },\r\n  img: {\r\n    width: Dimensions.get(\"window\").width * 0.8,\r\n    height: Dimensions.get(\"window\").width * 0.8,\r\n    borderRadius: 10,\r\n    overflow: \"hidden\",\r\n  },\r\n});\r\n\r\nexport default Weather;\r\n"]},"metadata":{},"sourceType":"module"}